/*
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, 
and each of their nodes contains a single digit. 
Add the two numbers and return the sumÂ as a linked list.
You may assume the two numbers do not contain any leading zero,
except the number 0 itself.

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode ans = res;
        int carry = 0;
        int num = 0;

        while(l1!=null||l2!=null){
            int x;
            int y;
            if(l1!=null)
            x = l1.val;
            else x = 0;
            if(l2!=null)
            y = l2.val;
            else y = 0;
            num = (x+y+carry)%10;
            carry = (int)(x+y+carry)/10;
            res.next = new ListNode(num);
            res = res.next;
            if(l1!=null)
            l1 = l1.next;
            if(l2!=null)
            l2 = l2.next;
        }
        if(carry>0)
        res.next = new ListNode(carry);
        return ans.next;
    }
}
